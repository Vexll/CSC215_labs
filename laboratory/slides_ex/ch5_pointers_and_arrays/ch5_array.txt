
Arrays

- Array: Fixed-size sequential collection of elements of the same type.



- Primitive arrays implemented as a pointer to block of contiguous memory locations




- Declaration
    <data_type> <array_name>[<positive_int_array_size>];



- Array Initializer
    <data_type> <array_name>[<optional_size>] = {<comma-sep elements>};
    <optional_size> >= # of elements




- Under the hood: the array is constant pointer to the first element --> int ∗pa = arr; ⇔ int ∗pa = &arr[0];




- Array variable is not modifiable/reassignable like a pointer
    int a[5];
    int b[] = {-1, 3, -5, 7, -9};
    a = b;
    error: assignment to expression with array type



- arr[3] is the same as *(arr+3)



- what does sizeof(<variable>) function do?
    it return the size of memory for the given parameter.



- how to know the length of an array ?
    you would -> sizeof(<variable>) / sizeof(<variable[0]>) 
        here we division the total size over the size of single data type of your variable
        example = int numbers[5]; --> sizeof(numbers) = 5 * (4 = bytes) = 20
        #where each int size in memory = 4 bytes, so we divide it with it's size --> 20 / 4 = 5 = length  



- Multidimensional Array 
    - syntax: <data_type> <name>[<size1>][size2]..[sizeN];
    Example: int threedim[5][10][4];

    - initializer: = { { {..},{..},{..}}, {...}, {...}}  
    Example: int twodim[2][4]={{1,2,3,4},{-1,-2,-3,-4}}; /* or simply: */
             int twodim[2][4]={1, 2, 3, 4, -1, -2, -3, -4};

    remark that you can not omit any dimension size

    - Accessing individual elements: <name>[<dim1index>][<dim2index>]...[<dimNindex>]
    Example: twodim[1][2]=5; printf("%d\n", twodim[0][3]);


    - Pointer style: <type> ** <name>; /* add * for every extra dimension */
    a pointer to the 1st element of an array, each element of which is a pointer to 
    the 1st element in an array

    More flexibility:
        Example:
        char b[4][7] = {"CSC111", "CSC113", "CSC212", "CSC215"};
        char *bb[] = {"CSC215", "This is a beautiful morning","M","I guess so"};



- Pointer Arithmetic

    # Assignment operator = : initialize or assign a value to a pointer
        - value such as 0 (NULL)
        - expression involving the address of previously defined data of appropriate type
        - value of a pointer of the same type, or different type casted to the correct type

    # Arithmetic operators +, - : scaling is applied

        - adds a pointer and an integer to get a pointer to an element of the same array
        - subtract an integer from a pointer to get a pointer to an element of the same array
        - Subtract a pointer from a pointer to get number of elements of the same array between them

    # Increment/Decrement ++, -- : scaling is applied
        - result is undefined if the resulting pointer does not point to element within the same array

    # Comparative operators:
        - == , != : can be used to compare a pointer to 0 (NULL)
        -  == , != , > , >= , < , <= : can be used between two pointers to elements in the same array
    
    # when a pointer = 0; --> (NULL)

    All other pointer Arithmetic is illegal.
 




